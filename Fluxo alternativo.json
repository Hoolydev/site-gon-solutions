{
  "name": "Fluxo Alternativo Simplificado",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "site",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [160, 300],
      "id": "webhook-site",
      "name": "Webhook Site"
    },
    {
      "parameters": {
        "jsCode": "// Extrai e processa dados do webhook\nconst body = $json.body;\nconst mensagemCompleta = body.text?.message || 'Sem mensagem';\n\n// Extrai nome e empresa da mensagem formatada\nlet nome = body.senderName || 'Cliente';\nlet empresa = 'Não informado';\n\n// Se a mensagem contém formato estruturado, extrai os dados\nif (mensagemCompleta.includes('*Nome:*')) {\n  const nomeStart = mensagemCompleta.indexOf('*Nome:*') + 7;\n  const nomeEnd = mensagemCompleta.indexOf('\\n', nomeStart);\n  nome = mensagemCompleta.substring(nomeStart, nomeEnd > -1 ? nomeEnd : undefined).trim();\n}\n\nif (mensagemCompleta.includes('*Empresa:*')) {\n  const empresaStart = mensagemCompleta.indexOf('*Empresa:*') + 10;\n  const empresaEnd = mensagemCompleta.indexOf('\\n', empresaStart);\n  empresa = mensagemCompleta.substring(empresaStart, empresaEnd > -1 ? empresaEnd : undefined).trim();\n}\n\n// Extrai apenas a mensagem do usuário\nlet mensagemLimpa = mensagemCompleta;\nif (mensagemCompleta.includes('*Mensagem:*')) {\n  const msgStart = mensagemCompleta.indexOf('*Mensagem:*') + 11;\n  mensagemLimpa = mensagemCompleta.substring(msgStart).trim();\n}\n\nreturn {\n  telefone: body.phone || 'unknown',\n  nome: nome,\n  empresa: empresa,\n  mensagem: mensagemLimpa,\n  mensagem_completa: mensagemCompleta,\n  timestamp: new Date().toISOString()\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300],
      "id": "processar-webhook",
      "name": "Processar Webhook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversas (telefone, nome, mensagem, timestamp) VALUES ('{{ $json.telefone }}', '{{ $json.nome }}', '{{ $json.mensagem }}', '{{ $json.timestamp }}') ON CONFLICT (telefone) DO UPDATE SET nome = '{{ $json.nome }}', ultima_mensagem = '{{ $json.mensagem }}', updated_at = '{{ $json.timestamp }}' RETURNING *;"
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [640, 300],
      "id": "salvar-conversa",
      "name": "Salvar Conversa",
      "credentials": {
        "postgres": {
          "id": "py77429cz1L1FBB1",
          "name": "Agente GOn"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT mensagem, timestamp FROM conversas WHERE telefone = '{{ $('Processar Webhook').item.json.telefone }}' ORDER BY timestamp DESC LIMIT 10;"
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [880, 300],
      "id": "buscar-historico",
      "name": "Buscar Histórico",
      "credentials": {
        "postgres": {
          "id": "py77429cz1L1FBB1",
          "name": "Agente GOn"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Monta contexto para IA\nconst dadosAtual = $('Processar Webhook').item.json;\n\n// Verifica se $json é array ou objeto único\nlet historicoArray = [];\nif (Array.isArray($json)) {\n  historicoArray = $json;\n} else if ($json && typeof $json === 'object') {\n  historicoArray = [$json];\n}\n\n// Monta histórico\nconst historico = historicoArray\n  .filter(item => item && item.mensagem)\n  .map(item => `${item.timestamp || 'Sem data'}: ${item.mensagem}`)\n  .join('\\n');\n\nreturn {\n  telefone: dadosAtual.telefone,\n  nome: dadosAtual.nome,\n  mensagem_atual: dadosAtual.mensagem,\n  historico_conversa: historico,\n  contexto_completo: `Cliente: ${dadosAtual.nome}\\nEmpresa: ${dadosAtual.empresa || 'Não informado'}\\nTelefone: ${dadosAtual.telefone}\\nMensagem atual: ${dadosAtual.mensagem}\\n\\nHistórico da conversa:\\n${historico || 'Primeira conversa'}`\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300],
      "id": "montar-contexto",
      "name": "Montar Contexto"
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [1600, 300],
      "id": "openai-model",
      "name": "OpenAI Model"
    },
    {
      "parameters": {
        "name": "secretaria_gon",
        "description": "Você é a secretária virtual da GON Solutions, especializada em automação e IA.",
        "promptTemplate": "Você é a secretária virtual da GON Solutions.\n\nContexto da conversa:\n{{ $('Montar Contexto').item.json.contexto_completo }}\n\nResponda de forma profissional e prestativa. Use o histórico para manter contexto da conversa.\n\nResposta:",
        "hasOutputParser": false
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [1360, 300],
      "id": "secretaria-ia",
      "name": "Secretária IA"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE conversas SET mensagem = '{{ $('Secretária IA').item.json.text }}', timestamp = '{{ $now.toISO() }}', updated_at = '{{ $now.toISO() }}' WHERE telefone = '{{ $('Processar Webhook').item.json.telefone }}'; INSERT INTO conversas (telefone, nome, mensagem, timestamp) SELECT '{{ $('Processar Webhook').item.json.telefone }}', 'GON Solutions', '{{ $('Secretária IA').item.json.text }}', '{{ $now.toISO() }}' WHERE NOT EXISTS (SELECT 1 FROM conversas WHERE telefone = '{{ $('Processar Webhook').item.json.telefone }}');"
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1840, 300],
      "id": "salvar-resposta",
      "name": "Salvar Resposta",
      "credentials": {
        "postgres": {
          "id": "py77429cz1L1FBB1",
          "name": "Agente GOn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://chatwoot.gonsolutions.site/api/v1/accounts/1/conversations/{{ $('Processar Webhook').item.json.telefone.replace('+', '').replace('(', '').replace(')', '').replace('-', '').replace(' ', '') }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "chatwootApi",
        "sendBody": true,
        "bodyParameters": {
              "parameters": [
                {
                  "name": "content",
                  "value": "{{ $('Secretária IA').item.json.text }}"
                }
              ]
            },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2080, 300],
      "id": "enviar-resposta",
      "name": "Enviar Resposta",
      "credentials": {
        "chatwootApi": {
          "id": "jHzjqR0ygg3QMXGg",
          "name": "ChatWoot account 2"
        }
      }
    }
  ],
  "connections": {
    "Webhook Site": {
      "main": [
        [
          {
            "node": "Processar Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Webhook": {
      "main": [
        [
          {
            "node": "Salvar Conversa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Conversa": {
      "main": [
        [
          {
            "node": "Buscar Histórico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Histórico": {
      "main": [
        [
          {
            "node": "Montar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Montar Contexto": {
      "main": [
        [
          {
            "node": "Secretária IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Secretária IA": {
      "main": [
        [
          {
            "node": "Salvar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Resposta": {
      "main": [
        [
          {
            "node": "Enviar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Secretária IA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "fluxo-alternativo-simplificado"
  },
  "id": "FluxoAlternativoSimplificado",
  "tags": ["site", "postgresql", "simplificado"]
}